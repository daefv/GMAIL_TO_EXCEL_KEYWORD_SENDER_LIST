{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM9XOdVp47wlNMgHB4/fKha"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import imaplib\n","import email\n","import re\n","\n","# create an IMAP client instance\n","mail = imaplib.IMAP4_SSL('imap.gmail.com')\n","\n","# specify the keyword to search for\n","email_address = input('what is your email address?: \\n')\n","\n","password = input('what is your App password? (This is a special password under security under settings): \\n')\n","\n","keyword_to_search = input('what keyword do you want to search?: \\n')\n","\n","emails_to_search = int(input('how many emails do you want to search through? (integer input): \\n'))\n","\n","# log in to the Gmail account\n","mail.login(email_address, password)\n","\n","# select the inbox folder\n","mail.select('inbox')\n","\n","# get the latest 150 email messages from the inbox\n","typ, data = mail.search(None, 'ALL')\n","latest_email_ids = data[0].split()[-emails_to_search:]\n","\n","print(f'Searching for keyword \"{keyword_to_search}\" in the body of the latest ' +str(emails_to_search)+ ' email messages...\\n')\n","\n","count_keyword = 0\n","sender_set = set() # create an empty set to store unique email addresses of senders\n","\n","# iterate over the latest email messages\n","for email_id in latest_email_ids:\n","    typ, msg_data = mail.fetch(email_id, '(RFC822)')\n","    for response_part in msg_data:\n","        if isinstance(response_part, tuple):\n","            # parse the email message\n","            msg = email.message_from_bytes(response_part[1])\n","            \n","            # get the sender of the email\n","            sender = msg['From']\n","            \n","            # extract the body of the email as text\n","            if msg.is_multipart():\n","                for part in msg.walk():\n","                    if part.get_content_type() == 'text/plain':\n","                        try:\n","                            body = part.get_payload(decode=True).decode('utf-8')\n","                        except UnicodeDecodeError:\n","                            body = part.get_payload(decode=True).decode('iso-8859-1')\n","\n","                        count_keyword += body.count(keyword_to_search)\n","\n","                        # add the email address to the set if the keyword is found\n","                        if keyword_to_search.lower() in body.lower():\n","                            email_address = re.search(r'[\\w\\.-]+@[\\w\\.-]+', sender)\n","                            sender_set.add(email_address.group(0))\n","                            \n","                    elif part.get_content_maintype() == 'text':\n","                        try:\n","                            body = part.get_payload(decode=True).decode('utf-8')\n","                        except UnicodeDecodeError:\n","                            body = part.get_payload(decode=True).decode('iso-8859-1')\n","\n","                        count_keyword += body.count(keyword_to_search)\n","\n","                        # add the email address to the set if the keyword is found\n","                        if keyword_to_search.lower() in body.lower():\n","                            email_address = re.search(r'[\\w\\.-]+@[\\w\\.-]+', sender)\n","                            sender_set.add(email_address.group(0))\n","            else:\n","                try:\n","                    body = msg.get_payload(decode=True).decode('utf-8')\n","                except UnicodeDecodeError:\n","                    body = msg.get_payload(decode=True).decode('iso-8859-1')\n","\n","                count_keyword += body.count(keyword_to_search)\n","\n","                # add the email address to the set if the keyword is found\n","                if keyword_to_search.lower() in body.lower():\n","                    email_address = re.search(r'[\\w\\.-]+@[\\w\\.-]+', sender)\n","                    sender_set.add(email_address.group(0))\n","\n","# print the total number of occurrences of the keyword\n","print(f'The keyword \"{keyword_to_search}\" appears {count_keyword} time(s) in the body of the latest ' +str(emails_to_search)+ ' email messages. \\n')\n","\n","# create pandas DataFrame with sender_set data\n","df = pd.DataFrame(list(sender_set), columns=['Sender Email'])\n","\n","# export DataFrame to Excel file\n","df.to_excel('sender_emails.xlsx', index=False)\n","\n","print(f'Successfully exported {len(sender_set)} unique sender email addresses to \"sender_emails.xlsx\" file.\\n')\n","print('your excel file is stored in the same location as this program, under Files. \\nDownload it and use Excel to open the file.')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qiuENA9K8E2o","executionInfo":{"status":"ok","timestamp":1678552226030,"user_tz":300,"elapsed":90415,"user":{"displayName":"David BIRON","userId":"17450065797413870221"}},"outputId":"9b39efd0-59b1-4b78-df11-dfd590e66444"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["what is your email address?: \n","5291ccc@gmail.com\n","what is your App password? (This is a special password under security under settings): \n","gufatgnrolhcvjlz\n","what keyword do you want to search?: \n","review\n","how many emails do you want to search through? (integer input): \n","1000\n","Searching for keyword \"review\" in the body of the latest 1000 email messages...\n","\n","The keyword \"review\" appears 1535 time(s) in the body of the latest 1000 email messages. \n","\n","Successfully exported 43 unique sender email addresses to \"sender_emails.xlsx\" file.\n","\n","your excel file is stored in the same location as this program, under Files. \n","Download it and use Excel to open the file.\n"]}]}]}